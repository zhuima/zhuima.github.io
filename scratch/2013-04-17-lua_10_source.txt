---
layout: post
title: "看看Lua 1.0 代码"
description: ""
category: 
tags: []
---
{% include JB/setup %}

最近稍微看了一些Lua方面的东西，当前的实现是5.2版本的，代码也才2w来行。不过偶然下载了1.0版本的代码，发现更精简。Lua的设计原则一直坚持着，
作者甚至在OO盛行的年代也没有给Lua加上原生的class和object概念。这个版本虽然简陋，但还是可以稍微看看来体会Lua的设计原则，也为阅读最新的Lua代码做个预热。

首先来看看Lua1.0的一些基本情况：

     The implementation followed a tenet that is now central to Extreme Programming: 
	 “the simplest thing that could possibly work” . 
	 The lexical scanner was written with lex and the parser with yacc, 
	 The parser translated Lua programs into instructions for a stack-based 
	 virtual machine, which were then executed by a simple interpreter. 
	 
     Despite this simple implementation — or possibly because of it — 
	 Lua surpassed our expectations.

这里的主要内容包含两个部分：stack based虚拟机，lex/yacc语法分析。

y_tab.c这个文件主要功能是语法分析，工具yacc生成的代码，没什么可读性。或者应该找文件lua.stx来看看，不过这个文件并没有被包含在1.0的代码里。

当执行`./lua array.lua`类似代码的时候，首先打开文件array.lua，把io读写设置为文件读写，然后这段代码开始parse生成指令并运行。

{% highlight cpp %}
int lua_parse (void) {
    Byte *initcode = maincode;
    err = 0;
    if (yyparse () || (err==1)) return 1;
    *maincode++ = HALT;
    if (lua_execute (initcode)) return 1;
    maincode = initcode;
    return 0;
}
{% endhighlight %}

stack-based的虚拟机用来执行生成的虚拟指令，最重要的几个变量是pc指向当前运行的指令(也可能是数据)，top指向执行栈的顶部，base指向栈的底部。指令分为几类，Push/Store，跳转类(JMP, ONTJMP, ONFJMP,IFFJMP) 运算类(+,-,*,/ 等等)，还有和函数调用相关的(CALLFUNC,RETCODE)。
top往下的几个指针指向的是最近计算需要的变量，而结果也往往是放在栈的顶部，最简单的四则运算执行过程如下：
<img src="/images/two_op.png" alt="My code is compiling" class="img-center" />
另外有一些只要一个Op的指令也类似，不过不会把top往下移动。 

Lua的代码风格很好，很值得学习，一些人已经在写一些源码分析方面的书籍了，比如云风的这个系列[Reading Lua](http://www.codingnow.com/temp/readinglua.pdf)，还有这个[系列](http://www.codedump.info/?tag=lua)。再挖一个坑，以后花时间好好研读新的Lua代码。我快从原来挖的那个坑里走出来了，一个Hobby OS至少可以运行了， :)。

另外如果你对实现一个小语言感兴趣，[这里Ruby quiz #135有一个使用虚拟机实现的方式](http://www.ruby-forum.com/topic/121846#545361)。
